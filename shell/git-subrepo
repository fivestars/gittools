#! /bin/bash
# Original source can be found at https://github-ca.corp.zynga.com/jowilson/gittools

function git-subrepo.help {
    echo "\
Usage: git subrepo [<general options>] [list]
   or: git subrepo [<general options>] install [--local] [--global] [--core]
   or: git subrepo [<general options>] uninstall [--local] [--global] [--core]
   or: git subrepo [<general options>] add [--no-recurse] [-f|--force] [(-p|--pin) <pin>]
                                       <repository> [<path>]
   or: git subrepo [<general options>] rm [-d|--delete] [<path>...]
   or: git subrepo [<general options>] checkout <path> [<pin>]
   or: git subrepo [<general options>] update [-i <indent>] [--no-recurse] 
                                       [--no-command] [--top] [--rebase]
                                       [(-p|--pin) (c|k|o|s)] [<path>...]
   or: git subrepo [<general options>] postupdate [--set] [--clear] [<command>]
   or: git subrepo [<general options>] foreach <command> [<path>...]
   or: git subrepo [<general options>] publish [-f] [-m <message>]
   or: git subrepo [<general options>] help

Files:
    .gitrepos: This is where git-subrepo stores its tracking information.
               Like .gitignore, it is intended to be committed like any
               other file in your repository. It follows the git config
               file format and can be manipulated with git-config.

    .gitignore: git-subrepo attempts to keep the .gitignore file synchronized
                with the .gitrepos entries. sub-repo directories will be
                ignored.

General Options:
    -c|--color (auto|yes|no): Controls whether special color control characters
                              are written to stdout.
                        
                              auto: Default, let git-subrepo attempt to detect
                                    whether or not to output colors.
                              yes: Force color output.
                              no: Disable color output.

    -f|--file: Use the given file rather than the local .gitrepos file. For
               operations that recurse to sub-repos, this file is only
               used for the top-level repo. The sub-repos will use their
               standard .gitrepos file.

    -q|--quiet: Suppress stdout output.

    -r|--retry <num>: Attempt remote-related git commands up to <num> times.
                      Wait 2 seconds before the second attempt, 4 before the 
                      third, 8 before the fourth, and so on. Default value
                      is 3.

Operations:
    list: Lists the current sub-repos for this repository.

    install: Installs 'git-subrepo' into any of three locations.
             --local: The repository's aliases (default)
             --global: Your global aliases
             --core: Copies this file into this machine's git core 
                     directory. Any 'subrepo' aliases will no longer
                     be effective.

    uninstall: Undoes the effects of 'install'.

    add: Adds a new repository as a sub-repo. This will clone the
         repository to <path> and create an entry in the .gitrepos
         file.
 
         -f|--force: If the <path> already exists, continue to update
                     the .gitrepos file and leave the directory alone.
         -p|--pin <pin>: The repository will be checked out to <pin>,
                         and it will be recorded in the sub-repo's
                         .gitrepos entry.
         --no-recurse: By default, git-subrepo will recursively
                       descend into the new sub-repo and perform
                       a 'git-subrepo update' on them (also recursive).
                       Use this if you only want to clone this
                       new sub-repo.

    rm: Removes a sub-repo from this repository. This removes the
        sub-repo's entry from the .gitrepos file.

        -r: the sub-repo's directory will be removed from the
            working directory as well.

    checkout: Checks out a sub-repo to the given <pin>. 
              This pin will be recorded in the sub-repo's .gitrepos
              entry.
              If no <pin> is given, the sub-repo's pin value will
              be cleared from the .gitrepos file.

              -b: Attempt to create a new branch with name <pin>

    update: Clones any new repositories found in the .gitrepos file,
            or just <path>... sub-repos if provided, and pulls down
            any changes for the existing sub-repos.
            If the sub-repo's remote repository differs from the
            one in the .gitrepos file and there are unpushed changes
            in  that sub-repo, you will be prompted to resolve these
            changes before continuing.
            If a the sub-repo has a pin in the .gitrepos file and
            it differs from the sub-repo's currently checked out
            pin, you will be given a choice of how to handle it:
            switch, keep, overwrite.

            --no-recurse: By default, git-subrepo will recursively
                          descend into each sub-repo and perform a
                          'git-subrepo update' on them (also recursive).
                          Use this if you only want to update this
                          top-level repo.
            --no-command: By default, git-subrepo will execute any 
                          command configured by postupdate. Prevent
                          that behavior with this.
            --top: Perform a pull on this top-level repo first.
            --rebase: Perform a rebase rather than a merge when
                      pulling commits from the sub-repos' origins.
                      Also used with the --top pull.
            --pin (c|k|o|s): Use this value rather than waiting for user
                           input when prompted to handle a difference
                           in .gitrepos pin and current pin.

    postupdate: Configures commands to be run after a successful update.
                Call with no options or command to list the currently 
                configured commands.
                Call with <command> but no options to simply add a command
                to the list.
                --set: Replace all currently configured commands with
                       the one provided on the command line.
                --clear: Remove all currently configured commands.

    publish: Safely pushes the current .gitrepos file.
             It iterates through the sub-repo list in the .gitrepos
             file and verifies that they are checked out locally 
             and that each pin(if present) exists in its remote 
             repository.
             You are then prompted to continue with the add-commit-push
             of the .gitrepos file.
             This operation will not proceed unless the index (stage)
             is clean.

             -f: The prompt will be suppressed, and it will proceed
                 as if you had entered 'y'.
             -m: The commit message. Defaults to 'Updating sub-repos'

    foreach: Execute <command> for each sub-repo in the .gitrepos file or
             for each <path>.

    help: Displays this help message.

"
}

function git-subrepo.install {
    local TOKEN LOCAL GLOBAL CORE CHOICE
    [[ -z $@ ]] && LOCAL=2
    for TOKEN in "$@"; do
	case $TOKEN in
	    --local) shift; LOCAL=1;;
	    --global) shift; [[ $LOCAL == 2 ]] && LOCAL=; GLOBAL=1;;
	    --core) shift; [[ $LOCAL == 2 ]] && LOCAL=; CORE=1;;
	    *) echo "Unknown option: $TOKEN"; return 1;; 
	esac
    done
    
    if [[ -n $LOCAL ]]; then
	git config alias.subrepo '!$(git rev-parse --show-toplevel)/git-subrepo' && \
	    echo "Added to your repository's aliases."
    fi

    if [[ -n $GLOBAL ]]; then
	echo "!$(git rev-parse --show-toplevel)/git-subrepo" && \
	git config --global alias.subrepo "!$(git rev-parse --show-toplevel)/git-subrepo" && \
	    echo "Added to your global aliases."
    fi

    if [[ -n $CORE ]]; then
	echo "This will supercede any subrepo aliases on this machine."
	echo -n "Continue? (y/N) "
	read CHOICE
	case $CHOICE in
	    y|Y) cp $BASH_SOURCE $(git --exec-path) && \
		echo "Copied to $(git --exec-path)/git-subrepo" || \
		echo "Could not copy to $(git --exec-path)/git-subrepo";;
	esac
    fi
}

function git-subrepo.uninstall {
    local TOKEN LOCAL GLOBAL CORE CHOICE
    [[ -z $@ ]] && LOCAL=2
    for TOKEN in "$@"; do
	case $TOKEN in
	    --local) shift; LOCAL=1;;
	    --global) shift; [[ $LOCAL == 2 ]] && LOCAL=; GLOBAL=1;;
	    --core) shift; [[ $LOCAL == 2 ]] && LOCAL=; CORE=1;;
	esac
    done
    
    if [[ -n $LOCAL ]]; then
	git config --unset alias.subrepo && \
	    echo "Removed from your repository's aliases."
    fi

    if [[ -n $GLOBAL ]]; then
	git config --global --unset alias.subrepo && \
	    echo "Removed from your global aliases."
	
    fi

    if [[ -n $CORE && -e "$(git --exec-path)/git-subrepo" ]]; then
	echo "This will remove 'git subrepo' from this machine."
	echo -n "Continue? (y/N) "
	read CHOICE
	case $CHOICE in
	    y|Y) rm -f "$(git --exec-path)/git-subrepo" && \
		echo "Deleted $(git --exec-path)/git-subrepo" || \
		echo "Could not remove from $(git --exec-path)";;
	esac
    fi
}

function git-subrepo.add {
    local TOKEN DIR URL CURL PIN FORCE RECURSE=1 COLOROPT="-c no"

    for TOKEN in "$@"; do
	[[ ${TOKEN:0:1} == '-' ]] && shift
	case $TOKEN in
	    --no-recurse) RECURSE=;;
	    -f|--force) FORCE=1;;
	    -p|--pin) PIN=$1; shift;;
	    --pin=*) PIN=${TOKEN#*=};;
	    *) [[ ${TOKEN:0:1} == "-" ]] && echo "Unknown option: $TOKEN" && return 1;;
	esac
    done

    # See if <path> is supplied or not
    read URL DIR <<< "$@"
    if [[ -z $DIR ]]; then
	DIR=$(echo $URL | sed 's/\(.*[:/]\|^\)\([^:/]\+\)\.git/\2/')
    fi

    touch $FILE
    if CURL=$(git config --file $FILE subrepo.$DIR.url); then
	echo "Sub-repo already exists as $CURL" >&2
	return 1
    elif [[ -e $DIR ]]; then
	echo -n "$DIR is already present. " >&2
	if [[ -n $FORCE ]]; then
	    echo "Adding sub-repo record, but leaving directory alone" >&2
	else
	    echo "Move aside or choose another location for your sub-repo." >&2
	    return 1
	fi
    fi

    # Prevent the use of relative file paths
    if [[ ${URL:0:1} != '/' && ${URL:0:8} != 'file:///' && -e $URL ]]; then
	echo "Will not add a repository using a relative filepath" >&2
	return 1
    fi

    if [[ ! -e $DIR ]] && ! git__ clone $URL $DIR; then
	echo "Failed to clone sub-repo" >&2
	return 1
    fi

    if [[ -n $PIN ]]; then
	# Attempt to checkout $PIN for this sub-repo
	pushd $DIR >/dev/null

	if ! git checkout $PIN; then
	    echo "Failed to checkout $PIN" >&2
	    popd >/dev/null
	    rm -rf $DIR
	    return 1
	fi

        if git branch | grep -q "(no branch)"; then
	    PIN="!!$PIN"
        fi

	popd >/dev/null
    fi
    
    # Update .gitrepos
    git config --file $FILE subrepo.$DIR.path $DIR
    git config --file $FILE subrepo.$DIR.url $URL
    [[ -n $PIN ]] && git config --file $FILE subrepo.$DIR.pin $PIN

    # Update .gitignore
    echo /$DIR >> .gitignore

    if [[ -n $RECURSE && -e $DIR/.gitrepos ]]; then
	echo "Recursing to $DIR"
	pushd $DIR >/dev/null
	[[ -n $COLOR ]] && COLOROPT="-c yes"
	if ! $BASH_SOURCE $COLOROPT update --prefix "$DIR($PIN)/"; then
	    echo "Failed to update $DIR" >&2
	    return 1
	fi
	popd >/dev/null
    fi
}

function git-subrepo.rm {
    local TOKEN DELETE DIR

    for TOKEN in "$@"; do
	[[ ${TOKEN:0:1} == '-' ]] && shift
	case $TOKEN in
	    -d|--delete) DELETE=1;;
	    *) [[ ${TOKEN:0:1} == "-" ]] && echo "Unknown option: $TOKEN" && return 1;;
	esac
    done

    for DIR in "$@"; do
	if git config --file $FILE subrepo.$DIR.url &>/dev/null; then
	    if [[ -n $DELETE ]]; then
		echo "Removing sub-repo record and directory"
		rm -rf $DIR
	    else
		echo "Removing sub-repo record, leaving directory"
	    fi
	    git config --file $FILE --remove-section subrepo.$DIR 2>/dev/null
	    if [[ -e .gitignore ]]; then
		sed -i'' "\|^/${DIR}$|d; /^$/d" .gitignore
	    fi
	else
	    echo "Unknown sub-repo" >&2
	fi
    done
}

function git-subrepo.update {
    local TOKEN ARGS REPOS REPO COMMIT TOP REBASE RECURSE=1 PREFIX= CHOICEOPT CHOICE COLOROPT="-c no" DIR URL PIN CPIN COMMAND=1

    # We need to save a reference to the outer stdin here since
    # we want to read from the keyboard for user input and the
    # while loop will have its own stdin for reading the .gitrepos
    # file.
    exec 10<&0

    for TOKEN in "$@"; do
	[[ ${TOKEN:0:1} == '-' ]] && shift
	case $TOKEN in
	    --rebase) ARGS="${ARGS[@]} $TOKEN"; REBASE=$TOKEN;;
	    --top) ARGS="${ARGS[@]} $TOKEN"; TOP=1;;
	    -p|--pin) ARGS="${ARGS[@]} $TOKEN $1"; CHOICEOPT=$1; shift;;
	    --pin=*) ARGS="${ARGS[@]} $TOKEN"; CHOICEOPT=${TOKEN#*=};;
	    --no-recurse) ARGS="${ARGS[@]} $TOKEN"; RECURSE=;;
	    --no-command) ARGS="${ARGS[@]} $TOKEN"; COMMAND=;;
	    --prefix) PREFIX=$1; shift;;
	    --prefix=*) ARGS="${ARGS[@]} $TOKEN"; CHOICEOPT=${TOKEN#*=};;
	    *) [[ ${TOKEN:0:1} == "-" ]] && echo "Unknown option: $TOKEN" && return 1;;
	esac
    done
    REPOS="$@"

    # Update the top-level repository, if requested
    if [[ -n $TOP ]]; then
	if ! git__ pull $REBASE; then
	    return 1
	fi
    fi

    while read DIR; do
	URL=$(git config --file $FILE subrepo.$DIR.url)
	PIN=$(git config --file $FILE subrepo.$DIR.pin)
	echo

	# See if the sub-repo is pinned to a particular commit.
	if [[ ${PIN:0:2} == "!!" ]]; then
	    COMMIT=1
	    PIN=${PIN:2}
	fi
	
	# First, check to see if the remote has changed. If so, make sure to preserve any
	# local, non-published changes. Otherwise, we can safely delete it and proceed
	# as if it's a brand new sub-repo.
	if [[ -e $DIR ]]; then
	    # The sub-repo directory is already present. Navigate to it.
	    pushd $DIR >/dev/null
	    
	    # If we detect that the sub-repo's remote has changed, force a manual intervention.
	    if ! git remote -v | grep -q "origin[[:space:]]\+$URL"; then
		
		# Fetch remote changes so we can compare to latest data.
		if ! git__ fetch &>/dev/null; then
		    echo "Failed to fetch remote changes." >&2
		    return 1
		fi
		local MESSAGE=""
		[[ $(git ls-files -o --exclude-standard | wc -l) != 0 ]] && \
		    MESSAGE="$MESSAGE - new files\n"
		[[ $(git ls-files -dm | wc -l) != 0 ]] && \
		    MESSAGE="$MESSAGE - edits\n"
		[[ $(git diff --name-only --cached | wc -l) != 0 ]] && \
		    MESSAGE="$MESSAGE - staged changes\n"
		[[ $(git rev-list --all --not --remotes | wc -l) != 0 ]] && \
		    MESSAGE="$MESSAGE - local commits or stashed changes\n"

		if [[ -n $MESSAGE ]]; then
		    echo -e "${RED}$PREFIX$DIR($PIN) -- $URL ${CLEAR}"
		    echo -e "Remote has changed for this sub-repo and unpublished local changes were found.\n${MESSAGE}Resolve these before continuing, or just delete this sub-repo directory and update again." >&2
		    return 1
		else
		    # It's safe to switch to the new remote, so delete the current sub-repo.
		    popd >/dev/null
		    rm -rf $DIR
		fi
	    else
		popd >/dev/null
	    fi
	fi
	
	# If the sub-repo directory doesn't exist, we must clone it down now
	if [[ ! -e $DIR ]]; then
	    echo -e "${GREEN}$PREFIX$DIR($PIN) -- $URL ${CLEAR}"
	    if ! git__ clone $URL $DIR; then
		echo "Failed to clone sub-repo" >&2
		return 1
	    fi
	    
	    if [[ -n $PIN ]]; then
		pushd $DIR >/dev/null
		if ! git checkout $PIN; then
		    echo "Failed to checkout $PIN" >&2
		    return 1
		fi
		popd >/dev/null
	    fi
	else
	    # The sub-repo directory is already present. Navigate to it.
	    pushd $DIR >/dev/null

	    # Determine the currently checked out branch of the sub-repo.
	    local BRANCH=$(git branch | grep '^*' | sed 's/* //')
	    if [[ "$BRANCH" == "(no branch)" ]]; then
		local REFLOG=$(git reflog -n1)
		CPIN=${REFLOG%% *}
	    else
		CPIN=$BRANCH
	    fi

	    # If they differ, ask how we're expected to handle it.
	    if [[ -n $PIN && $CPIN != $PIN ]]; then
		if [[ -z $CHOICEOPT ]]; then
		    CHOICE=
		    echo "${RED}$PREFIX$DIR($CPIN) -- $URL ${CLEAR}"
		    echo "Your current pin does not match the specified sub-repo pin: $PIN"
		    while [[ -z $CHOICE ]]; do
			echo "What would you like to do?"
			echo " c) switch to the specified sub-repo pin (default, will checkout the sub-repo to the .gitrepos pin)"
			echo " k) keep the current pin (make no changes)"
			echo " o) overwrite the .gitrepos pin with the current pin"
			echo " s) display the git status of the sub-repo"
			read -u 10 CHOICE
			if [[ "$CHOICE" == "s" ]]; then
			    CHOICE=
			    echo
			    git status
			    echo
			fi
		    done
		else
		    CHOICE=$CHOICEOPT
		fi
		
		case ${CHOICE:=s} in
		    s)  ;;
		    k)  popd >/dev/null;
			continue;;
		    o)  popd >/dev/null;
			_checkout $DIR $CPIN;
			pushd $DIR >/dev/null;
			continue;;
		    *)  echo "Invalid choice: $CHOICE. Stopping." >&2;
			return 1;;
		esac
	    else
		echo -e "${GRAY}$PREFIX$DIR($PIN) -- $URL ${CLEAR}"
	    fi

	    if ! git__ fetch; then
		echo "Failed to fetch $DIR" >&2
		return 1
	    fi

	    if [[ -n $PIN && $PIN != $CPIN ]]; then
		# We have a pin in the .gitrepos file, switch to it
		git checkout $PIN || echo "Failed to checkout $PIN" >&2 return 1
		CPIN=$PIN
	    fi

	    if git rev-parse @{u} &>/dev/null; then
		# We have an upstream, let's merge or rebase
		if [[ -n $REBASE ]]; then
		    git rebase origin/$CPIN || { "Failed to rebase to origin/$CPIN" >&2 && return 1; }
		else
		    git merge origin/$CPIN || { "Failed to merge from origin/$CPIN" >&2 && return 1; }
		fi
	    else
		[[ -z $PIN ]] && echo "Doing nothing"
		popd >/dev/null
		continue;
	    fi

	    popd >/dev/null
	fi

        # Recurse to this sub-repo if it has a .gitrepos file
	if [[ -n $RECURSE && -e $DIR/.gitrepos ]]; then
	    echo "Recursing to $DIR"
	    pushd $DIR >/dev/null
	    [[ -n $COLOR ]] && COLOROPT="-c yes"
	    if ! $BASH_SOURCE $COLOROPT update "${ARGS[@]}" --prefix "${PREFIX}$DIR($PIN)/"; then
		echo "Failed to update $DIR" >&2
		return 1
	    fi
	    popd >/dev/null
	fi
    done < <(
	if [[ -n $REPOS ]]; then
	    for REPO in ${REPOS[@]}; do
		if git config --file $FILE subrepo.$REPO.url &> /dev/null; then
		    echo $REPO
		fi
	    done
        else
	    git config --file $FILE --list | grep "^subrepo\..*\.path=" | sed 's/^.*path=\(.*\)/\1/g'
        fi)

    # Perform any post-update commands, if not suppressed
    if [[ -n $COMMAND ]]; then
	git config -f $FILE --get-all config.postupdate.command | while read COMMAND; do
	    eval $COMMAND <&10
	done
    fi
}

function git-subrepo.publish {
    local MESSAGE="Updating sub-repos" PUSH
    
    local OPTARG OPTIND OPTERR OPT CHOICE
    while getopts ":m:f" OPT; do
	case $OPT in
	    m) MESSAGE="$OPTARG";;
	    f) PUSH=1;;
	esac
    done
    shift $((OPTIND-1))

    if [[ $(git diff --name-only --cached | wc -l) != 0 ]]; then
	echo "Staged changes found. Please commit or remove them before continuing" >&2
	return 1
    fi
    
    echo "Checking:"
    echo "---------"
    
    local DIR URL PIN COMMIT
    while read DIR; do
	URL=$(git config --file $FILE subrepo.$DIR.url)
	PIN=$(git config --file $FILE subrepo.$DIR.pin)
	echo "  $DIR"
	if [[ ! -e $DIR ]]; then
	    echo "Sub-repo directory does not exist locally. Try running 'git subrepo update' first." >&2
	    return 1
	fi
	
	# See if the sub-repo is pinned to a particular commit.
	if [[ ${PIN:0:2} == "!!" ]]; then
	    COMMIT=1
	    PIN=${PIN:2}
	fi
	
	pushd $DIR >/dev/null

	if ! git__ fetch &>/dev/null; then
	    echo "Failed to fetch remote changes." >&2
	    return 1
	fi
	
	if [[ -n $COMMIT ]]; then
	    if ! git branch -r --contains $PIN &>/dev/null; then
		echo "$DIR reference $PIN not pushed to $URL yet" >&2
		return 1
	    fi
	elif [[ -n $PIN ]]; then
	    if ! git branch -r | grep -q "origin/$PIN"; then
		echo "$DIR branch $PIN does not exist on $URL yet" >&2
		return 1
	    fi
	fi

	popd >/dev/null

    done < <(
	git config --file $FILE --list | grep "^subrepo\..*\.path=" | sed 's/^.*path=\(.*\)/\1/g'
    )

    if [[ -z $PUSH ]]; then
	echo -n "Ready to commit and push. Continue? (Y/n) "
	read CHOICE
	case $CHOICE in
	    ''|y|Y) ;;
	    *) echo "Aborting publish" >&2; return 1;;
	esac
    fi

    # Let's do it.
    git add $FILE .gitignore
    git commit -m "$MESSAGE"
    git__ push
}

function git-subrepo.checkout {
    if [[ $# -lt 1 ]]; then
	echo "Must provide <path>" >&2
	exit 1
    fi

    local DIR=$1 PIN URL B
    shift

    local OPTARG OPTIND OPTERR OPT
    while getopts ":b" OPT; do
	case $OPT in
	    b) B="-b";;
	esac
    done
    shift $((OPTIND-1))

    PIN=$1

    if ! URL=$(git config --file $FILE subrepo.$DIR.url); then
	echo "Unknown sub-repo: $DIR" >&2
	return 1
    elif [[ ! -e $DIR ]]; then
	echo "Could not find sub-repo at $DIR. Try using 'git subrepo add'" >&2
	return 1
    fi
    
    echo -e "${GRAY} $DIR($PIN) -- $URL ${CLEAR}"

    if [[ -n $PIN ]]; then
	pushd $DIR >/dev/null
	if git__ fetch && git checkout $B $PIN; then
            if git branch | grep -q "(no branch)"; then
		PIN="!!$PIN"
            fi
	    popd >/dev/null
	    git config --file $FILE subrepo.$DIR.pin $PIN
	else
	    echo "Failed to checkout $PIN" >&2
	    popd >/dev/null
	    return 1
	fi
	echo
    else
	git config --file $FILE --unset subrepo.$DIR.pin
	echo "No longer managing pin for $DIR"
    fi
}

function git-subrepo.postupdate {
    local TOKEN COMMAND
    for TOKEN in "$@"; do
	[[ ${TOKEN:0:1} == '-' ]] && shift || break
	case $TOKEN in
	    --clear) git config --file $FILE --remove-section config.postupdate &>/dev/null; return;;
	    --set) git config --file $FILE --remove-section config.postupdate &>/dev/null;;
	    *) [[ ${TOKEN:0:1} == "-" ]] && echo "Unknown option: $TOKEN" && return 1;;
	esac
    done
    COMMAND="$@"

    if [[ -n $COMMAND ]]; then
	git config --file $FILE --add config.postupdate.command $(echo $COMMAND | md5sum | cut -d' ' -f1)
	sed -i'' s/$(echo $COMMAND | md5sum | cut -d' ' -f1)/\""$COMMAND"\"/ $FILE
    else
	git config --file $FILE --get-all config.postupdate.command
    fi
}

function git-subrepo.foreach {
    local COMMAND REPOS REPO DIR URL PIN
    COMMAND=$1; shift
    REPOS="$@"

    while read DIR; do
	URL=$(git config --file $FILE subrepo.$DIR.url)
	PIN=$(git config --file $FILE subrepo.$DIR.pin)
	echo -e "\n${GRAY}$DIR($PIN) -- $URL ${CLEAR}"
	pushd $DIR >/dev/null
	eval $COMMAND
	popd >/dev/null
    done < <(
	if [[ -n $REPOS ]]; then
	    for REPO in ${REPOS[@]}; do
		if git config --file $FILE subrepo.$REPO.url &> /dev/null; then
		    echo $REPO
		fi
	    done
        else
	    git config --file $FILE --list | grep "^subrepo\..*\.path=" | sed 's/^.*path=\(.*\)/\1/g'
        fi)
}

function git-subrepo.list {
    local REPOS="$@" DIR URL PIN HASH COMMIT PINLEN CPIN PIN_ERR REM_ERR BRANCH REFLOG REFHASH REFNAME COUNT=0
    local FORMAT="%-20s %b%-10s %-10s%b %b%s%b\n"

    BRANCH=$(git branch | grep '^*' | sed 's/* //')
    if [[ "$BRANCH" == "(no branch)" ]]; then
	REFLOG=$(git reflog -n1)
	REFHASH=${REFLOG%% *}
	REFNAME=${REFLOG##* }
	if [[ ${REFNAME:0:${#REFHASH}} == ${REFHASH} ]]; then
            BRANCH="(detached at ${REFHASH})"
	else
            BRANCH="(detached at ${REFNAME})"
	fi
    fi
    
    COUNT=$(git config --file $FILE --list | grep "^subrepo\..*\.path=" | wc -l)

    echo
    echo "Current Branch: ${BRANCH}"
    echo "Number of sub-repos: ${COUNT}"
    echo
    printf "$FORMAT" "Path" "$PIN_ERR" "Pin" "Current Pin" "$CLEAR" "$REM_ERR" "Url" "$CLEAR"
    echo "------------------------------------------------------------------------------------"
    
    while read DIR; do
	URL=$(git config --file $FILE subrepo.$DIR.url)
	PIN=$(git config --file $FILE subrepo.$DIR.pin)
	echo $PIN | grep -q "^!!" && HASH=1

	if [[ ! -e $DIR ]]; then
	    CPIN="(not present)"
	    PIN_ERR=${RED}
	    REM_ERR=
	else
	    pushd $DIR >/dev/null

	    local BRANCH=$(git branch | grep '^*' | sed 's/* //')
	    if [[ "$BRANCH" == "(no branch)" ]]; then
		local REFLOG=$(git reflog -n1)
		CPIN=${REFLOG%% *}
	    else
		CPIN=$BRANCH
	    fi

	    PIN_ERR=
	    if [[ -n $PIN ]]; then
		if [[ -n $HASH ]]; then
		    if ! { COMMIT=$(git rev-parse $PIN) && [[ $COMMIT == $(git rev-parse $CPIN) ]]; }; then
			PIN_ERR=${RED}
		    fi
		elif [[ $PIN != $CPIN ]]; then
		    PIN_ERR=${RED}
		fi
	    fi

	    if [[ -n $HASH && -n $PIN ]]; then
		[[ ${#CPIN} -lt ${#PIN} ]] && PIN=${PIN:0:${#CPIN}} || CPIN=${CPIN:0:${#PIN}}
	    fi

	    git remote -v | grep -q "origin[[:space:]]\+$URL" && REM_ERR= || REM_ERR=${RED}
	    
	    popd >/dev/null
	fi
	
	printf "$FORMAT" "$DIR" "$PIN_ERR" "${PIN:---}" "$CPIN" "$CLEAR" "$REM_ERR" "$URL" "$CLEAR"
    done < <(
	if [[ -n $REPOS ]]; then
	    for REPO in ${REPOS[@]}; do
		if git config --file $FILE subrepo.$REPO.url &> /dev/null; then
		    echo $REPO
		fi
	    done
        else
	    git config --file $FILE --list | grep "^subrepo\..*\.path=" | sed 's/^.*path=\(.*\)/\1/g'
        fi)
}

function c {
    # Convenience function for colorization.
    # No arguments implies ending colorization.
    [[ -n $COLOR ]] && echo -en "\033[${1:-0}m"
}

function git__ {
    # Automatic retry, with increasing timeouts.
    local WAIT=1 REM=$RETRY;
    while [[ $REM -gt 1 ]] && ! git "$@" 2>/dev/null; do
	sleep $((WAIT *= 2))
	REM=$((REM - 1))
    done
    if [[ $REM == 1 ]]; then
	git "$@"
    fi	
}

# Extract any general options

## Default configuration data
FILE=.gitrepos

## Do our tty auto-detection for color output
[[ -t 1 ]] && COLOR=1 || COLOR=

### Pre-define some colors
RED=$(c '1;37;41')
GREEN=$(c '1;37;42')
GRAY=$(c '30;47')
CLEAR=$(c)

## Default number of git command attempts
RETRY=3

while [[ -n $@ ]]; do
    TOKEN=$1
    [[ ${TOKEN:0:1} == '-' ]] && shift || break
    case $TOKEN in
	-c|--color)
	        case $1 in
		    auto) ;;
		    yes) COLOR=1;;
		    no) COLOR=;;
		    *) echo "Invalid option: $TOKEN $1" >&2; exit 1;;
		esac
		shift    
		;;
	--color=*)
	        case ${TOKEN#*=} in
		    auto) ;;
		    yes) COLOR=1;;
		    no) COLOR=;;
		    *) echo "Invalid option: $TOKEN $1" >&2; exit 1;;
		esac
		shift
		;;
	-f|--file) FILE=$1; shift;;
	--file=*) FILE=${TOKEN#*=};;
	-q|--quiet) exec 1>/dev/null;;
	-r|--retry) RETRY=$1; shift;;
	--retry=*) RETRY=${TOKEN#*=};;
	*) echo "Invalid option: $TOKEN" >&2; exit 1;;
    esac
done

# Move to the top-level git dir
cd $(git rev-parse --show-toplevel)

COMMAND=${1:-list}
shift

case $COMMAND in
    # Require a .gitrepos file for these commands
    list|rm|update|publish|checkout|postupdate|foreach)
        if [[ ! -e $FILE ]]; then
            echo "$FILE No sub-repos configured for this repository. Use 'git subrepo add' to get started." >&\2
            exit 1
        fi
        git-subrepo.$COMMAND "$@"
        ;;
    
    # These do not require a .gitrepos file
    add|help|install|uninstall)
        git-subrepo.$COMMAND "$@"
        ;;
    *)  echo "Unknown sub-repo command '$COMMAND'" >&2
        exit 1
        ;;
esac
