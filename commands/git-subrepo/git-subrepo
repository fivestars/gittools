#! /bin/bash

function git-subrepo.help {
	local HELP

	read -r -d '' HELP <<EOF || :
Description
    git-subrepo is an external git repository dependency tool and can be used
    as an alternative to git-submodule and git-subtree. It is intended to be a
    drop-in replacement for git-submodule, albiet with less "black magic" under
    the hood.

    git-subrepo allows you to have a parent project with one or more external
    dependencies (other git repos). The external repos have the option of being
    "pinned" to particular branches, tags or commits. Upon running
    "git-subrepo update", the dependencies will be synced from their respective
    remote repositories.

    It differs with git-submodule in that git-subrepo enables a looser coupling
    of parent-to-child repositories and attempts to alleviate the pain of
    forgetting to commit and push a child repository before pushing a parent
    repository.

Usage:
        git subrepo [<general options>] [list [-v|--verbose] [<path>...]]
    or: git subrepo [<general options>] install [--local] [--global] [--core]
    or: git subrepo [<general options>] uninstall [--local] [--global] [--core]
    or: git subrepo [<general options>] add [--no-recurse] [-f|--force]
                                            [(-p|--pin) <pin>] <repository>
                                            [<path>]
    or: git subrepo [<general options>] rm [-d|--delete] [<path>...]
    or: git subrepo [<general options>] checkout <path> [<pin>]
    or: git subrepo [<general options>] update [-i <indent>] [--no-recurse] 
                                            [--no-command] [--top] [--rebase]
                                            [(-p|--pin) (c|k|o|s)] [<path>...]
    or: git subrepo [<general options>] postupdate [--set] [--clear]
                                            [<command>]
    or: git subrepo [<general options>] foreach <command> [<path>...]
    or: git subrepo [<general options>] publish [-f] [-m <message>]
    or: git subrepo [<general options>] help

Files:
    .gitrepos
        This is where git-subrepo stores its tracking information. Like
        .gitignore, it is intended to be committed along with any other file
        in your repository. It follows the git config file format and can be
        manipulated with git-config.

    .gitignore
        git-subrepo attempts to keep the .gitignore file synchronized with the
        .gitrepos entries. sub-repo directories will be ignored.

General Options:
    -c|--color (a|auto|y|yes|n|no)
        Controls whether special color control characters are written to stdout.

        a|auto: Default, let git-subrepo attempt to detect
            whether or not to output colors.
        y|yes: Force color output.
        n|no: Disable color output.

    -f|--file
        Use the given file rather than the local .gitrepos file. For operations
        that recurse to sub-repos, this file is only used for the top-levelrepo.
        The sub-repos will use their standard .gitrepos file.

    -q|--quiet
        Suppress stdout output.

    -r|--retry <num>
        Attempt remote-related git commands up to <num> times. Wait 2 seconds
        before the second attempt, 4 before the third, 8 before the fourth, and
        so on. Default value is 3.

Common Arguments:
	<path>...
	    This indicates that the command will operate over a subset of the
	    sub-repos. If not specified, the command will iterate over the complete
        set of sub-repos.

        The format of <path>... is a list of path-strings, separated by spaces.

        A path-string can be one of the following formats:
            
            path/to/sub-repo
                A single sub-repo
          
            path/to/sub-repo...
                All sub-repos after this one, inclusive
            
            ...path/to/sub-repo
                All sub-repos up to this one, inclusive
            
            path/to/sub-repo-a...path/to/sub-repo-b
                All sub-repos between the two, inclusive

Operations:
    list
        Lists the current sub-repos for this repository.
            
            -v|--verbose
                Displays the sub-repo's remote URL as well

    install
        Installs 'git-subrepo' into any of three locations.
            
            --local
                The repository's aliases (default)

            --global
                Your global aliases
            
            --core
                Copies this file into this machine's git core directory. Any
                'subrepo' aliases will no longer be effective.

    uninstall
        Undoes the effects of 'install'.

    add
        Adds a new repository as a sub-repo. This will clone the repository to
        <path> and create an entry in the .gitrepos file.
 
            -f|--force
                If the <path> already exists, continue to update the .gitrepos
                file and leave the directory alone.

            -p|--pin <pin>
                The repository will be checked out to <pin>, and it will be
                recorded in the sub-repo's .gitrepos entry.

            --no-recurse
                By default, git-subrepo will recursively descend into the new
                sub-repo and perform a 'git-subrepo update' on them (also
                recursive). Use this if you only want to clone this new
				sub-repo but none of its sub-repos.

    rm
        Removes a sub-repo from this repository. This removes the sub-repo's
        entry from the .gitrepos file.

            -d|--delete
                the sub-repo's directory will be removed from the working
                directory as well.

    checkout
        Checks out a sub-repo to the given <pin>. This pin will be recorded in
        the sub-repo's .gitrepos entry. If no <pin> is given, the sub-repo's pin
        value will be cleared from the .gitrepos file.

            -b
                Attempt to create a new branch with name <pin>

    update
        Clones any new repositories found in the .gitrepos file, or just
        <path>... sub-repos if provided, and pulls down any changes for the
        existing sub-repos. If the sub-repo's remote repository differs from
        the one in the .gitrepos file and there are unpushed changes in that
        sub-repo, you will be prompted to resolve these changes before
        continuing. If a the sub-repo has a pin in the .gitrepos file and it
        differs from the sub-repo's currently checked out pin, you will be
        given a choice of how to handle it: switch, keep, overwrite.

            --no-recurse
                By default, git-subrepo will recursively descend into each
                sub-repo and perform a 'git-subrepo update' on them (also
                recursive). Use this if you only want to update this top-level
				repo.

            --no-command
                By default, git-subrepo will execute any command configured by
                postupdate. Prevent that behavior with this.

            --top
                Perform a pull on this top-level repo first.

            --rebase
                Perform a rebase rather than a merge when pulling commits from
                the sub-repos' origins. Also used with the --top pull.

            --pin (c|k|o|s)
                Use this value rather than waiting for user input when prompted
                to handle a difference in .gitrepos pin and current pin.

    postupdate
        Configures commands to be run after a successful update. Call with no
        options or command to list the currently configured commands. Call with
        <command> but no options to simply add a command to the list.

            --set
                Replace all currently configured commands with the one provided
                on the command line.

            --clear
                Remove all currently configured commands.

    publish
        Safely pushes the current .gitrepos file. It iterates through the
        sub-repo list in the .gitrepos file and verifies that they are checked
        out locally and that each pin(if present) exists in its remote
        repository.
        
        You are then prompted to continue with the add-commit-push of the
        .gitrepos file. This operation will not proceed unless the index
        (stage) is clean.

             -f
                 The prompt will be suppressed, and it will proceed
                 as if you had entered 'y'.

             -m
                 The commit message. Defaults to 'Updating sub-repos'

    foreach
        Execute <command> for each sub-repo in the .gitrepos file or for each
        <path>.

    help
        Displays this help message.

EOF

	if [[ -t 0 ]]; then
		echo "$HELP" | less
	else
		echo "$HELP"
	fi
}

function git-subrepo.install {
    local TOKEN LOCAL=false GLOBAL=false CORE=false CHOICE
    for TOKEN in "$@"; do
        case $TOKEN in
            --local) shift; LOCAL=true;;
            --global) shift; GLOBAL=true;;
            --core) shift; CORE=true;;
            -t|--template) shift; TEMPLATE=true;;
            *) echo "Unknown option: $TOKEN"; return 1;;
        esac
    done
    $GLOBAL || $CORE || LOCAL=true

    if $LOCAL; then
        git config alias.subrepo "!$BASH_SOURCE_FULL" && \
            echo "Added \"subrepo\" to your repository's aliases."
    fi

    if $GLOBAL; then
        git config --global alias.subrepo "!$BASH_SOURCE_FULL" && \
            echo "Added \"subrepo\" to your global aliases."
    fi

    if $CORE; then
        echo "This will supercede any \"subrepo\" aliases on this machine."
        echo -n "Continue? (y/N) "
        read CHOICE
        case $CHOICE in
            y|Y) cp $BASH_SOURCE $(git --exec-path) && \
            echo "Copied to $(git --exec-path)/git-subrepo" || \
            echo "Could not copy to $(git --exec-path)/git-subrepo";;
        esac
    fi
}

function git-subrepo.uninstall {
    local TOKEN LOCAL=false GLOBAL=false CORE=false TEMPLATE=false CHOICE
    for TOKEN in "$@"; do
        case $TOKEN in
            --local) shift; LOCAL=true;;
            --global) shift; GLOBAL=true;;
            --core) shift; CORE=true;;
            -t|--template) shift; TEMPLATE=true;;
            *) echo "Unknown option: $TOKEN"; return 1;;
        esac
    done
    $GLOBAL || $CORE || LOCAL=true

    if $LOCAL; then
		git config --unset alias.subrepo && \
			echo "Removed from your repository's aliases."
    fi

    if $GLOBAL; then
		git config --global --unset alias.subrepo && \
			echo "Removed from your global aliases."
    fi

    if $CORE && [[ -e "$(git --exec-path)/git-subrepo" ]]; then
		echo "This will remove 'git subrepo' from this machine."
		echo -n "Continue? (y/N) "
		read CHOICE
		case $CHOICE in
			y|Y) rm -f "$(git --exec-path)/git-subrepo" && \
			echo "Deleted $(git --exec-path)/git-subrepo" || \
			echo "Could not remove from $(git --exec-path)";;
		esac
    fi
}

function git-subrepo.add {
    local TOKEN DIR URL CURL PIN FORCE RECURSE=1 COLOROPT="-c no"

    for TOKEN in "$@"; do
		[[ ${TOKEN:0:1} == '-' ]] && shift
		case $TOKEN in
			--no-recurse) RECURSE= ;;
			-f|--force) FORCE=1;;
			-p|--pin) PIN=$1; shift;;
			--pin=*) PIN=${TOKEN#*=};;
			*) [[ ${TOKEN:0:1} == "-" ]] && echo "Unknown option: $TOKEN" && return 1;;
		esac
    done
    
    if [[ $# -eq 0 ]]; then
		echo "Missing required arguments" >&2
		return 1
    fi
    
    # See if <path> is supplied or not
    read URL DIR <<< "$@"
    if [[ -z $DIR ]]; then
		DIR=$(basename $URL)
		DIR=${DIR%.git}
    fi

    touch $GIT_CONFIG
    if CURL=$(git config subrepo.$DIR.url); then
		echo "Sub-repo already exists as $CURL" >&2
		return 1
    elif [[ -e $DIR ]]; then
		echo -n "$DIR is already present. " >&2
		if [[ -n $FORCE ]]; then
			echo "Adding sub-repo record, but leaving directory alone" >&2
		else
			echo "Move aside or choose another location for your sub-repo." >&2
			return 1
		fi
    fi

    # Prevent the use of relative file paths
    if [[ ${URL:0:1} != '/' && ${URL:0:8} != 'file:///' && -e $URL ]]; then
		echo "Will not add a repository using a relative filepath" >&2
		return 1
    fi

    if [[ ! -e $DIR ]] && ! git-subrepo.util.git-retry clone $URL $DIR; then
		echo "Failed to clone sub-repo" >&2
		return 1
    fi

    if [[ -n $PIN ]]; then
		# Attempt to checkout $PIN for this sub-repo
		pushd $DIR >/dev/null

		if ! git checkout $PIN; then
			echo "Failed to checkout $PIN" >&2
			popd >/dev/null
			rm -rf $DIR
			return 1
		fi

        if git branch | grep -q "(no branch)"; then
			PIN="!!$PIN"
        fi

		popd >/dev/null
    fi
    
    # Update .gitrepos
    git config subrepo.$DIR.path $DIR
    git config subrepo.$DIR.url $URL
    [[ -n $PIN ]] && git config subrepo.$DIR.pin $PIN

    # Update .gitignore
    echo /$DIR >> .gitignore

    # Recurse to this sub-repo if it has a .gitrepos file
    if [[ -n $RECURSE && -e $DIR/.gitrepos ]]; then
		echo "Recursing to $DIR"
		pushd $DIR >/dev/null
		$COLOR && COLOROPT="-c yes"
		if ! $BASH_SOURCE_FULL $COLOROPT update --prefix "$DIR$PIN/"; then
			echo "Failed to update $DIR" >&2
			return 1
		fi
		popd >/dev/null
    fi
}

function git-subrepo.rm {
    local TOKEN DELETE DIR

    for TOKEN in "$@"; do
		[[ ${TOKEN:0:1} == '-' ]] && shift
		case $TOKEN in
			-d|--delete) DELETE=1;;
			*) [[ ${TOKEN:0:1} == "-" ]] && echo "Unknown option: $TOKEN" && return 1;;
		esac
    done

    for DIR in "$@"; do
		if git config subrepo.$DIR.url &>/dev/null; then
			if [[ -n $DELETE ]]; then
				echo "Removing sub-repo record and directory"
				rm -rf $DIR
			else
				echo "Removing sub-repo record, leaving directory"
			fi
			git config --remove-section subrepo.$DIR 2>/dev/null
			if [[ -e .gitignore ]]; then
				sed -i'' "\|^/${DIR}$|d; /^$/d" .gitignore
			fi
		else
			echo "Unknown sub-repo" >&2
		fi
    done
}

function git-subrepo.update {
    local TOKEN ARGS=" " COMMIT TOP REBASE RECURSE=1 FORMAT \
		PREFIX INDENT CHOICEOPT CHOICE COLOROPT="-c no" DIR URL PIN CPIN \
		DPIN COMMAND=1 MESSAGE=""

	# We need to save a reference to the outer stdin here since
	# we want to read from the keyboard for user input and the
	# while loop will have its own stdin for reading the .gitrepos
	# file.
	exec 10<&0

	for TOKEN in "$@"; do
		read -r TOKEN <<< $TOKEN # trim whitespace
		[[ ${TOKEN:0:1} == '-' ]] && shift
		case $TOKEN in
			--rebase) ARGS="${ARGS[@]} $TOKEN"; REBASE=$TOKEN;;
			--top) ARGS="${ARGS[@]} $TOKEN"; TOP=1;;
			-p|--pin) ARGS="${ARGS[@]} $TOKEN $1"; CHOICEOPT=$1; shift;;
			--pin=*) ARGS="${ARGS[@]} $TOKEN"; CHOICEOPT=${TOKEN#*=};;
			--no-recurse) ARGS="${ARGS[@]} $TOKEN"; RECURSE= ;;
			--no-command) ARGS="${ARGS[@]} $TOKEN"; COMMAND= ;;
			--prefix) PREFIX=$1; shift;;
			--prefix=*) PREFIX=${TOKEN#*=};;
			--indent) INDENT=$1; shift;;
			--indent=*) INDENT=${TOKEN#*=};;
			*) [[ ${TOKEN:0:1} == "-" ]] && echo "Unknown option: $TOKEN" && return 1;;
		esac
	done

	FORMAT="%${INDENT}s%b%s%s%s -- %s %b\n"
	# Update the top-level repository, if requested
	if [[ -n $TOP ]]; then
		if ! git-subrepo.util.git-retry pull $REBASE; then
			return 1
		fi
	fi

	while read DIR; do
		URL=$(git config subrepo.$DIR.url)
		PIN=$(git config subrepo.$DIR.pin)
		DPIN=${PIN:+($PIN)}
		echo

		# See if the sub-repo is pinned to a particular commit.
		if [[ ${PIN:0:2} == "!!" ]]; then
			COMMIT=1
			PIN=${PIN:2}
		fi

		# First, check to see if the remote has changed. If so, make sure to preserve any
		# local, non-published changes. Otherwise, we can safely delete it and proceed
		# as if it's a brand new sub-repo.
		if [[ -e $DIR ]]; then
			# The sub-repo directory is already present. Navigate to it.
			pushd $DIR >/dev/null

			# If we detect that the sub-repo's remote has changed, force a manual intervention.
			if ! git remote -v | grep -q "origin[[:space:]]\+$URL"; then

				# Fetch remote changes so we can compare to latest data.
				if ! git-subrepo.util.git-retry fetch &>/dev/null; then
					printf "%${INDENT}sFailed to fetch remote changes.\n" >&2
					return 1
				fi

				[[ $(git ls-files -o --exclude-standard | wc -l) != 0 ]] && \
					MESSAGE="$MESSAGE - new files\n"
				[[ $(git ls-files -dm | wc -l) != 0 ]] && \
					MESSAGE="$MESSAGE - edits\n"
				[[ $(git diff --name-only --cached | wc -l) != 0 ]] && \
					MESSAGE="$MESSAGE - staged changes\n"
				[[ $(git rev-list --all --not --remotes | wc -l) != 0 ]] && \
					MESSAGE="$MESSAGE - local commits or stashed changes\n"

				if [[ -n $MESSAGE ]]; then
					printf "$FORMAT" "" "$RED" "$PREFIX" "$DIR" "$DPIN" "$URL" "$CLEAR"
					printf "%${INDENT}sRemote has changed for this sub-repo and unpublished local changes were found.\n${MESSAGE}Resolve these before continuing, or just delete this sub-repo directory and update again.\n" >&2
					return 1
				else
					# It's safe to switch to the new remote, so delete the current sub-repo.
					popd >/dev/null
					rm -rf $DIR
				fi
			else
				popd >/dev/null
			fi
		fi

		# If the sub-repo directory doesn't exist, we must clone it down now
		if [[ ! -e $DIR ]]; then
			printf "$FORMAT" "" "$GREEN" "$PREFIX" "$DIR" "$DPIN" "$URL" "$CLEAR"
			if ! git-subrepo.util.git-retry clone $URL $DIR; then
				printf "%${INDENT}sFailed to clone sub-repo\n" >&2
				return 1
			fi

			if [[ -n $PIN ]]; then
				pushd $DIR >/dev/null
				if ! git checkout $PIN; then
					printf "%${INDENT}sFailed to checkout $PIN\n" >&2
					return 1
				fi
				popd >/dev/null
			fi
		else
			# The sub-repo directory is already present. Navigate to it.
			pushd $DIR >/dev/null

			# Determine the currently checked out branch of the sub-repo.
			local BRANCH=$(git branch | grep '^*' | sed 's/* //')
			if [[ "$BRANCH" == "(no branch)" ]]; then
				local REFLOG=$(git reflog -n1)
				CPIN=${REFLOG%% *}
			else
				CPIN=$BRANCH
			fi

			# If they differ, ask how we're expected to handle it.
			if [[ -n $PIN && $CPIN != $PIN ]]; then
				if [[ -z $CHOICEOPT ]]; then
					CHOICE="s"
					DPIN="($CPIN)"
					printf "$FORMAT" "" "$RED" "$PREFIX" "$DIR" "$DPIN" "$URL" "$CLEAR"
					printf "%${INDENT}sYour current pin does not match the specified sub-repo pin: $PIN\n"
					while [[ $CHOICE == "s" ]]; do
					printf "%${INDENT}sWhat would you like to do?\n"
					printf "%${INDENT}s c) switch to the specified sub-repo pin (default, will checkout the sub-repo to the .gitrepos pin)\n"
					printf "%${INDENT}s k) keep the current pin (make no changes)\n"
					printf "%${INDENT}s o) overwrite the .gitrepos pin with the current pin\n"
					printf "%${INDENT}s s) display the git status of the sub-repo\n"
					read -u 10 CHOICE
					if [[ "$CHOICE" == "s" ]]; then
						echo
						git status
						echo
					fi
					done
				else
					CHOICE=$CHOICEOPT
				fi

				case ${CHOICE:=c} in
					c)  ;;
					k)  popd >/dev/null;
						continue;;
					o)  popd >/dev/null;
						_checkout $DIR $CPIN;
						pushd $DIR >/dev/null;
						continue;;
					*)  printf "%${INDENT}sInvalid choice: $CHOICE. Stopping.\n" >&2;
					return 1;;
				esac
			else
				printf "$FORMAT" "" "$GRAY" "$PREFIX" "$DIR" "$DPIN" "$URL" "$CLEAR"
			fi

			if ! git-subrepo.util.git-retry fetch; then
				printf "%${INDENT}sFailed to fetch $DIR\n" >&2
				return 1
			fi

			if [[ -n $PIN && $PIN != $CPIN ]]; then
				# We have a pin in the .gitrepos file, switch to it
				git checkout $PIN || printf "%${INDENT}sFailed to checkout $PIN\n" >&2 return 1
				CPIN=$PIN
			fi

			if git rev-parse @{u} &>/dev/null; then
				# We have an upstream, let's merge or rebase
				if [[ -n $REBASE ]]; then
					git rebase origin/$CPIN || { printf "%${INDENT}sFailed to rebase to origin/$CPIN\n" >&2 && return 1; }
				else
					git merge origin/$CPIN || { printf "%${INDENT}sFailed to merge from origin/$CPIN\n" >&2 && return 1; }
				fi
			else
				[[ -z $PIN ]] && printf "%${INDENT}sDoing nothing\n"
				popd >/dev/null
				continue;
			fi

			popd >/dev/null
		fi

			# Recurse to this sub-repo if it has a .gitrepos file
		if [[ -n $RECURSE && -e $DIR/.gitrepos ]]; then
			printf "%${INDENT}sRecursing to $DIR\n"
			pushd $DIR >/dev/null
			$COLOR && COLOROPT="-c yes"
			if ! $BASH_SOURCE $COLOROPT update "${ARGS[@]}" --prefix "${PREFIX}$DIR/" --indent $((INDENT + 2)); then
				printf "%${INDENT}sFailed to update $DIR\n" >&2
				return 1
			fi
			popd >/dev/null
		fi
	done < <(git-subrepo.util.expand-repos "$@")

	# Perform any post-update commands, if not suppressed
	if [[ -n $COMMAND ]]; then
		git config --get-all config.postupdate.command | while read COMMAND; do
			eval $COMMAND <&10
		done
	fi
}

function git-subrepo.publish {
    local MESSAGE="Updating sub-repos" PUSH
    
    local OPTARG OPTIND OPTERR OPT CHOICE
    while getopts ":m:f" OPT; do
		case $OPT in
			m) MESSAGE="$OPTARG";;
			f) PUSH=1;;
		esac
    done
    shift $((OPTIND-1))

    if [[ $(git diff --name-only --cached | wc -l) != 0 ]]; then
		echo "Staged changes found. Please commit or remove them before continuing" >&2
		return 1
    fi
    
    echo "Checking:"
    echo "---------"
    
    local DIR URL PIN COMMIT
    while read DIR; do
		URL=$(git config subrepo.$DIR.url)
		PIN=$(git config subrepo.$DIR.pin)
		echo "  $DIR"
		if [[ ! -e $DIR ]]; then
			echo "Sub-repo directory does not exist locally. Try running 'git subrepo update' first." >&2
			return 1
		fi

		# See if the sub-repo is pinned to a particular commit.
		if [[ ${PIN:0:2} == "!!" ]]; then
			COMMIT=1
			PIN=${PIN:2}
		fi

		pushd $DIR >/dev/null

		if ! git-subrepo.util.git-retry fetch &>/dev/null; then
			echo "Failed to fetch remote changes." >&2
			return 1
		fi

		if [[ -n $COMMIT ]]; then
			if ! git branch -r --contains $PIN &>/dev/null; then
				echo "$DIR reference $PIN not pushed to $URL yet" >&2
				return 1
			fi
		elif [[ -n $PIN ]]; then
			if ! git branch -r | grep -q "origin/$PIN"; then
				echo "$DIR branch $PIN does not exist on $URL yet" >&2
				return 1
			fi
		fi

		popd >/dev/null

    done < <(git-subrepo.util.expand-repos)

    if [[ -z $PUSH ]]; then
		echo -n "Ready to commit and push. Continue? (Y/n) "
		read CHOICE
		case $CHOICE in
			''|y|Y) ;;
			*) echo "Aborting publish" >&2; return 1;;
		esac
    fi

    # Let's do it.
    git add $GIT_CONFIG .gitignore
    git commit -m "$MESSAGE"
    git-subrepo.util.git-retry push
}

function git-subrepo.checkout {
    if [[ $# -lt 1 ]]; then
		echo "Must provide <path>" >&2
		return 1
    fi

    local DIR=$1 PIN URL B
    shift

    local OPTARG OPTIND OPTERR OPT
    while getopts ":b" OPT; do
		case $OPT in
			b) B="-b";;
		esac
    done
    shift $((OPTIND-1))

    PIN=$1

    if ! URL=$(git config subrepo.$DIR.url); then
		echo "Unknown sub-repo: $DIR" >&2
		return 1
    elif [[ ! -e $DIR ]]; then
		echo "Could not find sub-repo at $DIR. Try using 'git subrepo add'" >&2
		return 1
    fi
    
    echo -e "${GRAY} $DIR($PIN) -- $URL ${CLEAR}"

    if [[ -n $PIN ]]; then
		pushd $DIR >/dev/null
		if git-subrepo.util.git-retry fetch && git checkout $B $PIN; then
			if git branch | grep -q "(no branch)"; then
				PIN="!!$PIN"
			fi
			popd >/dev/null
			git config subrepo.$DIR.pin $PIN
		else
			echo "Failed to checkout $PIN" >&2
			popd >/dev/null
			return 1
		fi
		echo
    else
		git config --unset subrepo.$DIR.pin
		echo "No longer managing pin for $DIR"
    fi
}

function git-subrepo.postupdate {
    local TOKEN COMMAND
    for TOKEN in "$@"; do
		[[ ${TOKEN:0:1} == '-' ]] && shift || break
		case $TOKEN in
			--clear) git config --remove-section config.postupdate &>/dev/null; return;;
			--set) git config --remove-section config.postupdate &>/dev/null;;
			*) [[ ${TOKEN:0:1} == "-" ]] && echo "Unknown option: $TOKEN" && return 1;;
		esac
    done
    COMMAND="$@"

    if [[ -n $COMMAND ]]; then
		git config --add config.postupdate.command $(echo $COMMAND | md5sum | cut -d' ' -f1)
		sed -i'' s/$(echo $COMMAND | md5sum | cut -d' ' -f1)/\""$COMMAND"\"/ $GIT_CONFIG
    else
		git config --get-all config.postupdate.command
    fi
}

function git-subrepo.foreach {
    local COMMAND DIR URL PIN
    COMMAND=$1; shift

    while read DIR; do
		URL=$(git config subrepo.$DIR.url)
		PIN=$(git config subrepo.$DIR.pin)
		[[ -n $PIN ]] && PIN="($PIN)"
		echo -e "\n${GRAY}${DIR}${PIN} -- $URL ${CLEAR}"
		if [[ -e $DIR ]]; then
			pushd $DIR >/dev/null
			eval $COMMAND
			popd >/dev/null
		else
			echo "Skipping $DIR. Directory not present." >&2
		fi
    done < <(git-subrepo.util.expand-repos "$@")
}

function git-subrepo.list {
    local FORMAT DIR URL PIN HASH COMMIT PINLEN CPIN PIN_ERR REM_ERR BRANCH REFLOG REFHASH REFNAME COUNT=0 ARGS=" " VERBOSE INDENT

    for TOKEN in "$@"; do
		read -r TOKEN <<< $TOKEN # trim whitespace
		[[ ${TOKEN:0:1} == '-' ]] && shift
		case ${TOKEN} in
			-v|--verbose) ARGS="${ARGS[@]} $TOKEN"; VERBOSE=1;;
			--indent) INDENT=$1; shift;;
			--indent=*) INDENT=${TOKEN#*=};;
			*) [[ ${TOKEN:0:1} == "-" ]] && echo "Unknown option: $TOKEN" >&2 && return 1;;
		esac
    done

    FORMAT="%${INDENT}s%-$((20-INDENT))s %b%-11s %-11s%b %b%s%b\n"

    BRANCH=$(git branch | grep '^*' | sed 's/* //')
    if [[ "$BRANCH" == "(no branch)" ]]; then
		REFLOG=$(git reflog -n1)
		REFHASH=${REFLOG%% *}
		REFNAME=${REFLOG##* }
		if [[ ${REFNAME:0:${#REFHASH}} == ${REFHASH} ]]; then
			BRANCH="(detached at ${REFHASH})"
		else
			BRANCH="(detached at ${REFNAME})"
		fi
    fi
    
    COUNT=$(git config --list | grep "^subrepo\..*\.path=" | wc -l)

    if [[ -z $INDENT ]]; then
		printf "\n%${INDENT}sCurrent Branch: ${BRANCH}\n"
		printf "%${INDENT}sNumber of sub-repos: ${COUNT}\n\n"
		if [[ -z $VERBOSE ]]; then
			printf "$FORMAT" "" "Path" "$PIN_ERR" "Pin" "Checkout" "$CLEAR"
			printf "%${INDENT}s--------------------------------------------\n"
		else
			printf "$FORMAT" "" "Path" "$PIN_ERR" "Pin" "Checkout" "$CLEAR" "$REM_ERR" "Url" "$CLEAR"
			printf "%${INDENT}s------------------------------------------------------------------------------------\n"
		fi
    fi

    while read DIR; do
		URL=$(git config subrepo.$DIR.url)
		PIN=$(git config subrepo.$DIR.pin)
		echo $PIN | grep -q "^!!" && HASH=1

		if [[ ! -e $DIR ]]; then
			CPIN="(not present)"
			PIN_ERR=${RED}
			REM_ERR=
		else
			pushd $DIR >/dev/null

			local BRANCH=$(git branch | grep '^*' | sed 's/* //')
			if [[ "$BRANCH" == "(no branch)" ]]; then
				local REFLOG=$(git reflog -n1)
				CPIN=${REFLOG%% *}
			else
				CPIN=$BRANCH
			fi

			PIN_ERR=
			if [[ -n $PIN ]]; then
				if [[ -n $HASH ]]; then
					if ! { COMMIT=$(git rev-parse $PIN) && [[ $COMMIT == $(git rev-parse $CPIN) ]]; }; then
						PIN_ERR=${RED}
					fi
				elif [[ $PIN != $CPIN ]]; then
					PIN_ERR=${RED}
				fi
			fi

			if [[ -n $HASH && -n $PIN ]]; then
				[[ ${#CPIN} -lt ${#PIN} ]] && PIN=${PIN:0:${#CPIN}} || CPIN=${CPIN:0:${#PIN}}
			fi

			git remote -v | grep -q "origin[[:space:]]\+$URL" && REM_ERR= || REM_ERR=${RED}
			[[ -z $REM_ERR && -z $VERBOSE ]] && URL=

			popd >/dev/null
		fi

		printf "$FORMAT" "" "$DIR" "$PIN_ERR" "${PIN:---}" "$CPIN" "$CLEAR" "$REM_ERR" "$URL" "$CLEAR"

		# Recurse to this sub-repo if it has a .gitrepos file
		if [[ -e $DIR/.gitrepos ]]; then
			pushd $DIR >/dev/null
			$COLOR && COLOROPT="-c yes"
			$BASH_SOURCE_FULL $COLOROPT list --indent $((INDENT + 2)) "${ARGS[@]}"
			popd >/dev/null
		fi

    done < <(git-subrepo.util.expand-repos "$@")
}

function git-subrepo.util.c {
    # Convenience function for colorization.
    # No arguments implies ending colorization.
    $COLOR && echo -en "\033[${1:-0}m"
}

function git-subrepo.util.git-retry {
    # Automatic retry, with increasing timeouts.
    local WAIT=1 REM=$RETRY;
    while [[ $REM -gt 1 ]] && ! git "$@" 2>/dev/null; do
		sleep $((WAIT *= 2))
		REM=$((REM - 1))
    done
    if [[ $REM == 1 ]]; then
		git "$@"
    fi	
}

function git-subrepo.util.expand-repos () {
	local REPO IN=$(mktemp /tmp/git-subrepo.XXXXXXXXXX) OUT=$(mktemp /tmp/git-subrepo.XXXXXXXXXX) FIRST LAST START STOP

	# Get an ordered list of the subrepo entries
	git config --list | \
		grep -n "^subrepo\..*\.path=" | \
		sed 's/:.*=/ /g' >$IN

	if [[ -z "$@" ]]; then
		cp $IN $OUT
	else
		# Determine the limits of the open-ended ranges
		FIRST=$(head -n 1 <$IN)
		LAST=$(tail -n 1 <$IN)

		# For each entry in the input, determine the set of subrepos that it defines
		for REPO in "$@"; do

			if [[ "$REPO" == *...* ]]; then
				# A ranged entry has been found

				# Determine its limits
				[[ -n ${REPO%...*} ]] && START=${REPO%...*} || START=${FIRST#* }
				[[ -n ${REPO#*...} ]] && STOP=${REPO#*...} || STOP=${LAST#* }

				# Append the subrepos within the range to the output file
				CAPTURE=
				while read LINE; do
					[[ $START == ${LINE#* } ]] && CAPTURE=1
					[[ -n $CAPTURE ]] && echo $LINE >>$OUT
					[[ $STOP == ${LINE#* } ]] && CAPTURE=
				done <$IN

			else
				# The entry only defines a single subrepo
				grep $REPO $IN >> $OUT
			fi
		done
	fi

	# Generate the output (a sorted, unique list of subrepos)
	sort -g $OUT | uniq | cut -d' ' -f2

	# Cleanup
	rm -f $IN $OUT
}

# Store the full path of this file
BASH_SOURCE_FULL=$(cd $(dirname $BASH_SOURCE) && pwd)/$(basename $BASH_SOURCE)

# Extract any general options

## Default configuration data
export GIT_CONFIG=.gitrepos

## Do our tty auto-detection for color output
[[ -t 1 ]] && COLOR=true || COLOR=false

### Pre-define some colors
RED=$(git-subrepo.util.c '1;37;41')
GREEN=$(git-subrepo.util.c '1;37;42')
GRAY=$(git-subrepo.util.c '30;47')
CLEAR=$(git-subrepo.util.c)

## Default number of git command attempts
RETRY=3

while [[ -n "$@" ]]; do
    TOKEN=$1
    [[ ${TOKEN:0:1} == '-' ]] && shift || break
    case $TOKEN in
		-c|--color)
			case $1 in
				a|auto) ;;
				y|yes) COLOR=true;;
				n|no) COLOR=false;;
				*) echo "Invalid option: $TOKEN $1" >&2; exit 1;;
			esac
			shift
			;;
		--color=*)
			case ${TOKEN#*=} in
				a|auto) ;;
				y|yes) COLOR=true;;
				n|no) COLOR=false;;
				*) echo "Invalid option: $TOKEN" >&2; exit 1;;
			esac
			;;
		-f|--file) export GIT_CONFIG=$1; shift;;
		--file=*) export GIT_CONFIG=${TOKEN#*=};;
		-q|--quiet) exec 1>/dev/null;;
		-r|--retry) RETRY=$1; shift;;
		--retry=*) RETRY=${TOKEN#*=};;
		*) echo "Invalid option: $TOKEN" >&2; exit 1;;
	esac
done

# Move to the top-level git dir
if ! git rev-parse --show-toplevel &>/dev/null; then
	echo "Must be within a git repository" >&2
	exit 1
fi

cd $(git rev-parse --show-toplevel)
COMMAND=${1:-list}
shift || :

case $COMMAND in
    # Require a .gitrepos file for these commands
    list|rm|update|publish|checkout|postupdate|foreach)
        if [[ ! -e $GIT_CONFIG ]]; then
            echo "No sub-repos configured for this repository. Use 'git subrepo add' to get started." >&\2
            exit 1
        fi
        git-subrepo.$COMMAND "$@"
        ;;
    
    # These do not require a .gitrepos file
    add|help|install|uninstall)
        git-subrepo.$COMMAND "$@"
        ;;

    *)  echo "git: '$COMMAND' is not a git-subrepo command. See 'git subrepo help'." >&2
        exit 1
        ;;
esac
