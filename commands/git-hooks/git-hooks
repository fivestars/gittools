#! /bin/bash -e

# Global git hook list
#############################################
GITHOOKS=( applypatch-msg commit-msg post-checkout post-commit post-merge
           post-receive post-update pre-applypatch pre-commit prepare-commit-msg
           pre-rebase pre-receive update )

# Help
#############################################
read -r -d '' HELP <<HELP || :
Description
    git-hooks is a tool to facilitate git hook management, specifically being
    able to store your hooks within the repository itself and simply reference
    them from a multiplexer hook installed in the .git/hooks directory.

    The expected usage is to write an arbitrary number of individual hook
    scripts for a single standard git hook and store them in the .githooks
    directory. When git invokes the multiplexer script in .git/hooks, it
    will call your custom scripts sequentially, or in parallel if you configure
    it to do so.

    This way you can break your monolithic hooks into individual files, giving
    you greater flexibility regarding which pieces to run and when.

Usage
        git hooks [list [<git hook>...]]
    or: git hooks install [--local] [--global] [--core]
    or: git hooks uninstall [--local] [--global] [--core]
    or: git hooks setup [-e]
    or: git hooks add <path>...
    or: git hooks rm <custom script name>...
    or: git hooks enable <git hook>... <custom script name>...
    or: git hooks disable <git hook>... <custom script name>...
    or: git hooks run <git hook>|<custom script name>
    or: git hooks parallel <git hook> [<num>]
    or: git hooks show-input <git hook> [true|false]
    or: git hooks help

Files:
    .githooks
        This is where git-hooks will look for default hook scripts. Place your
        hook scripts in here rather than .git/hooks. Your hook scripts should
        follow the naming convention:

            <standard git hook name>-<custom suffix>

    .git/config
        git-hooks config settings will be stored in your repository's config
        file. In the case of a bare repository, the config file is located at
        ./config.

Common Arguments:
    <path>...
        The command accepts a list of path strings.

    <git hook>...
        The command accepts a list of git hook names. These names should only
        be the names of the standard git hooks:

$(echo ${GITHOOKS[*]} | xargs -L1 -n1 | sed 's/^/                    /g')

    <custom script name>...
        The command accepts a list of hook script names. These names may
        indicate scripts in the repo's .githooks directory, or external
        scripts installed via 'git-hooks add'. Standard git hook names are
        not considered valid items in this list.

Operations:
    list
        Lists the currently available custom scripts for each standard git
        hook. If any are disabled, it is noted in the output.

    install
        Installs 'git-hooks' into any of three locations.
            --local: The repository's aliases (default)
            --global: Your global aliases
            --core: Copies this file into this machine's git core directory.
                    Any 'hooks' aliases will no longer be effective.

    uninstall
        Undoes the effects of 'install'.

    setup
        Installs the multiplexer hooks into the .git/hooks directory. These
        scripts are the core of the git-hooks functionality. They are
        responsible for running any configured custom scripts according to
        your specifications (sequential vs parallel, disabled, etc.). This
        operation alse creates the .githooks directory and moves any existing
        hooks into it. Any scripts moved in this process will receive the
        "-moved" suffix.

        If "-e" is specified an active example script will be created in the new
        .githooks directory.

    add
        Adds new scripts to be run when their associated git hooks are invoked.
        <path>... should be a list of paths to external custom scripts. Any
        paths indicating scripts residing in the .githooks directory will be
        ignored.

    rm
        Removes previously added scripts from being run during git hook
        invocation.

    enable
        Enables a script to be run during git hook invocation. Scripts are
        enabled by default.

    disable
        Prevents a script from being run during git hook invocation.

    run
        Runs a git hook or an individual custom script. stdin and any extra
        arguments will be forwarded to the designated target.

    parallel
        Modify the hooks.<git hook>.parallel config setting. <num> should be
        the desired number of jobs to spawn when running the hook scripts. If
        <num> is not provided, it will display the current setting. If <num>
        is 0, it will be interpreted as the number of CPUs as seen by cpuid. If
        <num> is "-", the current setting will be cleared and the hook will
        not be run in parallel mode.

        When running in parallel, each script's output is buffered until it
        finishes. When complete, the output will be written to stdout.

    show-input
        Modify the hooks.<git hook>.showinput config setting. If no value is
        provided, it will display the current setting. If this setting is true,
        the received arguments and stdin will be displayed during git hook
        invocation.

    help
        Displays this help message.

Writing custom git hook scripts:

    Once "git-hooks setup" has been called for your repository, creating and
    installing your own hooks is a simple matter of placing them in the newly-
    created .githooks directory. Your hooks must follow a particular naming
    convention:

        <standard git hook name>-<custom suffix>

    When a git hook is invoked it will look for your hooks scripts with the
    corresponding prefix and call them according to your config. By default
    your scripts will be run sequentially in alphabetical order as they appear
    in the .githooks directory.

    You may also add external scripts using the "git-hooks add" command. These
    scripts need to follow the same naming convention as above, but cannot
    reside in the .githooks directory. These scripts will run after the ones
    found in .githooks and will be run sequentially in the order they appear
    in the .git/config file.

    Setting the parallel option (see above) will cause all scripts to be run
    concurrently without regard to their conventional order.

    Preventing parallel execution:

        If your script cannot be run in parallel with another of the same
        git hook family, you may enforce this by calling the exported function
        "prevent-parallel" from within your script.

        Example:

        #! /bin/bash
        prevent-parallel   # Will exit the hook with a non-zero exit code
                           # unless it is being run sequentially.

HELP

# Multiplexer script
#############################################
read -r -d '' MULTIPLEXER <<"MULTIPLEXER" || :
#! /bin/bash -e

# Make sure we're not accidentally being called from another runner script
[[ -z $HOOK ]] && export HOOK=$(basename "$0") || exit

# This script will run all configured hooks found in <repository>/.githooks
# and all hooks found by running:
#
#    git config --get-regexp "hooks\.$HOOK\.enabled" true
#
# It will fail if any of those return non-zero exit codes. You can disable 
# individual hooks through git configs:
#
#    # Disable all custom hooks for this git hook
#    git config --bool hooks.$HOOK.enabled false
#
#    # Disable an individual custom hook
#    git config --bool hooks.<custom hook>.enabled false
#
# The hooks will be run sequentially by default for safety.
# If you determine that your hooks can be run in parallel, enable it with:
#
#    git config --int hooks.$HOOK.parallel <num>
#
# where <num> is the number of jobs you wish to start. If 0, <num> will
# be interpretted as the number of CPUs on the machine. When running in
# parallel, each hook's output will be buffered until complete. If you
# choose to not run your hooks in parallel, the output will not be buffered.
#
# For safety, you can check for parallel execution in your hook by calling
# the prevent-parallel function. It checks the value of
# "git config hooks.$HOOK.parallel" and exits will non-zero exit code if it is
# set to anything but 1.
#
#    Example:
#        #! /bin/bash
#        prevent-parallel   # Will fail the hook unless
#                           # it is being run sequentially.
#

CAPTURE=/tmp/capture

cat <<"EOF" >$CAPTURE
#! /bin/bash

function prevent-parallel {
    if is-parallel; then
        echo "${0##*/} cannot be run as a parallel job: git config hooks.$HOOK.parallel is set"
        exit ${1:-1}
    fi
}

function capture_on_exit {
    # Store the exit code
    local RESULT=$?
    if [[ $RESULT -ne 0 ]]; then
        echo "[failed $(basename $hook) (exit code $RESULT)]"
    fi
}

# Create the temporary output buffer
read capture_outfile infile hook <<<$1
shift

# Redirect stdin to infile
exec 10<&0 0<$infile

# Report which hook is running
echo "[running $HOOK git hook: $hook]"

# Store stdout and stderr, then redirect them to the buffer
is-parallel && exec 11>&1 12>&2 &>$capture_outfile

# Provide the prevent-parallel function to the hook scripts
export -f prevent-parallel

# Display input if requested
if git config --get-regexp "hooks\.$HOOK\.showinput" true &>/dev/null; then
    echo "[$# args to $hook ${*:1}]"
    echo "[input to $hook]"
    cat $infile # | sed "s|^|$(basename $hook)(in)  \||g"
fi

# Set our exit trap to display any errors and do our clean up
trap "capture_on_exit $capture_outfile $hook" EXIT SIGHUP SIGINT SIGTERM

# Call the wrapped script
if is-parallel || git config --get-regexp "hooks\.$HOOK\.showinput" true &>/dev/null; then
    echo "[output for $hook]"
fi
$hook $* 2>&1 # | sed "s|^|$(basename $hook)(out) \||g"
exit ${PIPESTATUS[0]}
EOF

# Collect the various hooks to run
hooks=
missing=
disabled=
nonexecutable=
tmpfile=$(mktemp -u)
count=0

# Look in the default location of .githooks
if ls .githooks/${HOOK}-* &>/dev/null; then
    for hook in .githooks/${HOOK}-*; do
        if [[ -f ${hook} && -n ${hook%%*~} ]]; then
            if git config --get-regexp "hooks\.$HOOK\.enabled" false &>/dev/null \
                || git config --get-regexp "hooks\.${hook##*/}\.enabled" false &>/dev/null; then
                disabled="${disabled:+$disabled\0}$hook"
            elif [[ ! -x $hook ]]; then
                nonexecutable="${nonexecutable:+$nonexecutable\0}$hook"
            else
                hooks="${hooks:+$hooks\0}$tmpfile.$count $tmpfile.stdin $hook"
                count=$(( count + 1 ))
            fi
        fi
    done
fi

# Make sure that each configured hook can be found,
# Otherwise, fail after running the ones we cound find.
while read line; do
    section=${line%.enabled*}
    path=$(git config $section.path) || continue
    hook=${section#hooks\.}
    if [[ ! -e $path ]]; then
        missing="${missing:+$missing\0}$hook - $path"
    elif [[ ! -x $path ]]; then
        nonexecutable="${nonexecutable:+$nonexecutable\0}$hook - $path"
    elif git config --get-regexp "hooks\.$HOOK\.enabled" false &>/dev/null; then
        disabled="${disabled:+$disabled\0}$path"
    else
        hooks="${hooks:+$hooks\0}$tmpfile.$count $tmpfile.stdin $path"
        count=$(( count + 1 ))
    fi
done < <(git config --get-regexp "hooks\.${HOOK}-.*\.enabled" true)

# Display disabled hooks
if [[ -n $disabled ]]; then
    echo -e "[skipping disabled hooks]"
    echo -en $disabled | xargs -0 -L1 | sed "s/^\(.*\)/    [\1]/"
fi

# Might be done already
if [[ -z $hooks ]] && [[ -z $missing ]] && [[ -z $nonexecutable ]]; then
    exit
fi

function is-parallel {
    local jobs=$(git config hooks.$HOOK.parallel)
    [[ -n $jobs && ($jobs == 0 || $jobs -gt 1) ]]
}
export -f is-parallel

hooks_parallel="-P $(git config hooks.$HOOK.parallel)" || hooks_parallel="-P 1"
if [[ 0 == $(git config hooks.$HOOK.parallel) ]]; then
    hooks_parallel="-P $(grep -c processor /proc/cpuinfo)"
fi

# Set a trap to display any bufferred output and clean up our temp files
trap "rm -f ${tmpfile}.stdin; cat ${tmpfile}* 2>/dev/null; rm -f ${tmpfile}*" EXIT SIGHUP SIGINT SIGTERM

# Save our stdin so we can feed it to multiple scripts
cat >${tmpfile}.stdin

# Run the hooks through xargs. If any of them fail, xargs will fail and the script
# will exit with an error code due to the -e at the top of this script.
echo -en $hooks | xargs -0 -I {} $hooks_parallel bash -e $CAPTURE {} $*

# All hooks succeeded, reset our trap for cleanup and manually display the results
trap "rm -f ${tmpfile}*" EXIT SIGHUP SIGINT SIGTERM
rm ${tmpfile}.stdin
cat ${tmpfile}* 2>/dev/null || :

if [[ -n $missing || -n $nonexecutable ]]; then
    # Fail the hook if we couldn't find one of the hook scripts (even though we ran
    # the ones we found and encountered no errors)
    if [[ -n $missing ]]; then
        echo -e "[failed $HOOK checks due to missing hooks]"
        echo -en $missing | xargs -0 -L1 | sed "s/^\(.*\)/    [\1]/"
    fi

    # Fail the hook if we couldn't execute one of the hook scripts (even though we
    # ran the ones we found and encountered no errors)
    if [[ -n $nonexecutable ]]; then
        echo -e "[failed $HOOK checks due to non-executable hooks]"
        echo -en $nonexecutable | xargs -0 -L1 | sed "s/^\(.*\)/    [\1]/"
    fi

    exit 1
fi
MULTIPLEXER

# Globals
#############################################

# Store the full path of this file
BASH_SOURCE_DIR=$(cd $(dirname $BASH_SOURCE) && pwd)
BASH_SOURCE_FULL=$BASH_SOURCE_DIR/$(basename $BASH_SOURCE)

# Populated in _verify_dirs
GITDIR=$(git rev-parse --git-dir 2>/dev/null) || :
REPO=$(git rev-parse --show-toplevel 2>/dev/null) || :
BARE=$(git rev-parse --is-bare-repository 2>/dev/null) || :
if $BARE; then
    HOOKSDIR=$GITDIR/.githooks
    TOPDIR=$GITDIR
elif [[ -n $REPO ]]; then
    HOOKSDIR=$REPO/.githooks
    TOPDIR=$REPO
else
    HOOKSDIR=
    TOPDIR=
fi

# What command were we given?
COMMAND=${1:-list}; shift || :

# Functions
#############################################

function git-hooks._require_git_dir {
    if [[ -z $GITDIR ]]; then
        echo ".git directory required but not found" >&2 && return 1
    fi
}

function git-hooks._require_work_tree {
    if [[ -z $REPO ]]; then
        echo "Work tree required but not found" >&2 && return 1
    fi
}

function git-hooks._require_hook_dir {
    if [[ -z $HOOKSDIR ]]; then
        echo ".githooks directory required but not found" >&2 && return 1
    fi
}

function git-hooks._is-git-hook {
    local HOOK name=$1
    for HOOK in ${GITHOOKS[@]}; do
        [[ $HOOK == $name ]] && return 0
    done
    return 1
}

function git-hooks._git-hook-prefix {
    local HOOK name=$1
    for HOOK in ${GITHOOKS[@]}; do
        (echo $name | grep -q ^"$HOOK-") && echo $HOOK && return 0
    done
    return 1
}

function git-hooks.help {
    if [[ -t 0 ]]; then
        echo "$HELP" | less
    else
        echo "$HELP"
    fi
}

function git-hooks.install {
    local TOKEN LOCAL=false GLOBAL=false CORE=false TEMPLATE=false CHOICE
    for TOKEN in "$@"; do
        case $TOKEN in
            --local) shift; LOCAL=true;;
            --global) shift; GLOBAL=true;;
            --core) shift; CORE=true;;
            -t|--template) shift; TEMPLATE=true;;
            *) echo "Unknown option: $TOKEN"; return 1;;
        esac
    done
    $GLOBAL || $CORE || LOCAL=true

    if $LOCAL; then
        git config alias.hooks "!$BASH_SOURCE_FULL" && \
            echo "Added \"hooks\" to your repository's aliases."
    fi

    if $GLOBAL; then
        git config --global alias.hooks "!$BASH_SOURCE_FULL" && \
            echo "Added \"hooks\" to your global aliases."
    fi

    if $CORE; then
        echo "This will supercede any \"hooks\" aliases on this machine."
        echo -n "Continue? (y/N) "
        read CHOICE
        case $CHOICE in
            y|Y) cp $BASH_SOURCE $(git --exec-path) && \
            echo "Copied to $(git --exec-path)/git-hooks" || \
            echo "Could not copy to $(git --exec-path)/git-hooks";;
        esac
    fi

    if $TEMPLATE; then
        git config --global --path init.templatedir ~/.gittemplate
        mkdir -p ~/.gittemplate/hooks
        echo "$MULTIPLEXER" >~/.gittemplate/hooks/git-hooks-multiplexer
        chmod +x ~/.gittemplate/hooks/git-hooks-multiplexer
        pushd ~/.gittemplate/hooks >/dev/null
        for hook in ${GITHOOKS[*]}; do
            ln -bs ~/.gittemplate/hooks/git-hooks-multiplexer $hook
        done
        pushd >/dev/null
        cat <<EOF
Added hook scripts to your ~/.gittemplate/hooks directory.
Set init.templatedir = $(echo ~/.gittemplate) in your global git config.

These multiplexer hooks will be installed on any new repos created or cloned on
this system. Also, if you update the ~/.gittemplate/hooks/git-hooks-multiplexer
script or "git-hooks install -t" again, all repositories will run the new
multiplexer script.
EOF
    fi
}

function git-hooks.uninstall {
    local TOKEN LOCAL GLOBAL CORE CHOICE
    [[ -z $@ ]] && LOCAL=2
    for TOKEN in "$@"; do
        case $TOKEN in
            --local) shift; LOCAL=1;;
            --global) shift; [[ $LOCAL == 2 ]] && LOCAL=; GLOBAL=1;;
            --core) shift; [[ $LOCAL == 2 ]] && LOCAL=; CORE=1;;
        esac
    done

    if [[ -n $LOCAL ]]; then
        git config --unset alias.hooks && \
            echo "Removed from your repository's aliases."
    fi

    if [[ -n $GLOBAL ]]; then
        git config --global --unset alias.hooks && \
            echo "Removed from your global aliases."
    fi

    if [[ -n $CORE && -e "$(git --exec-path)/git-hooks" ]]; then
        echo "This will remove 'git hooks' from this machine."
        echo -n "Continue? (y/N) "
        read CHOICE
        case $CHOICE in
            y|Y) rm -f "$(git --exec-path)/git-hooks" && \
            echo "Deleted $(git --exec-path)/git-hooks" || \
            echo "Could not remove from $(git --exec-path)";;
        esac
    fi
}

function git-hooks.setup {
    local LINK ANSWER FIRSTTIME EXAMPLES=false

    while getopts ":e" OPT; do
        case $OPT in
            e) EXAMPLES=true;;
        esac
    done
    shift $((OPTIND-1))

    if [[ -h $GITDIR/hooks ]]; then
        LINK=$(readlink $GITDIR/hooks)
        echo "Warning: $GITDIR/hooks is a symlink to $LINK"
        echo -n "Unlink and proceed? (Y/n) "
        read ANSWER
        case $ANSWER in
            ""|y|Y) ;;
            *) echo "Stopping"; exit 1;;
        esac
        rm $GITDIR/hooks
        mkdir $GITDIR/hooks
        if ls $GITDIR/$LINK/* &>/dev/null; then
            cp -rv $GITDIR/$LINK/* $GITDIR/hooks
        fi
    fi

    # Install the git-hooks
    echo "Installing hooks:"
	echo "    Copying any existing hooks to $HOOKSDIR"

    # Create the .githooks dir
    [[ -e $HOOKSDIR ]] && FIRSTTIME=false || FIRSTTIME=true
    mkdir -p $HOOKSDIR $GITDIR/hooks

    # Move existing hooks to .githooks dir and copy runner script over
    for hook in ${GITHOOKS[*]}; do
        if $FIRSTTIME \
            && [[ -e $GITDIR/hooks/$hook ]] \
            && ! [[ -h $GITDIR/hooks/$hook \
                    && $(readlink $GITDIR/hooks/$hook) =~ git-hooks-multiplexer ]]; then
            mv -v $GITDIR/hooks/$hook $HOOKSDIR/$hook-moved | sed "s/^/    /"
        fi
        echo "$MULTIPLEXER" >$GITDIR/hooks/$hook
        chmod +x $GITDIR/hooks/$hook
    done

    # Sample script to demonstrate new hook functionality
    if $EXAMPLES; then
        if $BARE; then
            cat <<EOF >$HOOKSDIR/pre-receive-report
#! /bin/bash
cat <<MESSAGE
------------------------------------------------------------------------
This is an example hook to demonstrate pre-receive hook functionality.
If you are seeing this, it means you have successfully installed the
hooks for this repository. Disable it like this:

    git hooks disable pre-receive-report

or just delete the file (.githooks/pre-receive-report).
------------------------------------------------------------------------

MESSAGE

echo "Displaying stdin:"
echo "-----------------"
cat
echo

EOF
            chmod +x $HOOKSDIR/pre-receive-report
		else
            cat <<EOF >$HOOKSDIR/commit-msg-jira
#! /bin/bash

cat <<MESSAGE
------------------------------------------------------------------------
This is an example hook to demonstrate commit-msg hook functionality.
If you are seeing this, it means you have successfully installed the
hooks for this repository. Disable it like this:

    git hooks disable commit-msg-jira

or just delete the file (.githooks/commit-msg-jira).
------------------------------------------------------------------------

MESSAGE

# Fails unless the JIRA- prefix is found in the commit msg
if ! grep "JIRA-[[:digit:]]\+" &>/dev/null <$1; then
	echo "You must provide a JIRA-#### ticket number in your commit message."
	exit 1
fi
EOF
            chmod +x $HOOKSDIR/commit-msg-jira
        fi
    fi
}

function git-hooks.list {
    local HOOKS=${*:-${GITHOOKS[*]}} HOOK hooks hook line section path

    for HOOK in ${HOOKS[@]}; do
        if ! git-hooks._is-git-hook $HOOK; then
            echo "Hook must be a valid git hook name: $HOOK" >&2
            continue
        fi

        hooks=
        if ls $HOOKSDIR/${HOOK}-* &>/dev/null; then
            for path in $HOOKSDIR/${HOOK}-*; do
                if [[ -f ${path} && -n ${path%%*~} ]]; then
                    if git config --get-regexp "hooks\.$HOOK\.enabled" false &>/dev/null \
                        || git config --get-regexp "hooks\.${path##*/}\.enabled" false &>/dev/null; then
                        hooks="${hooks:+$hooks\0}$path (disabled)"
                    elif [[ ! -x $path ]]; then
                        hooks="${hooks:+$hooks\0}$path (not executable)"
                    else
                        hooks="${hooks:+$hooks\0}$path"
                    fi
                fi
            done
        fi

        while read line; do
            section=${line%.enabled*}
            path=$(git config $section.path) || continue

            hook=${section#hooks\.}
            if [[ ! -e $path ]]; then
                hooks="${hooks:+$hooks\0}$path (missing)"
            elif [[ ! -x $path ]]; then
                hooks="${hooks:+$hooks\0}$path (not executable)"
            elif git config --get-regexp "hooks\.$HOOK\.enabled" false &>/dev/null; then
                hooks="${hooks:+$hooks\0}$path (disabled)"
            else
                hooks="${hooks:+$hooks\0}$path"
            fi
        done < <(git config --get-regexp "hooks\.${HOOK}-.*\.enabled" true)

        if [[ -n $hooks ]]; then
            echo $HOOK
            echo "----------------------"
            echo -en $hooks | xargs -0 -L1
            echo
        fi
    done
}

function git-hooks.add {
    local path name prefix HOOK
    for path in $*; do
        name=$(basename $path)

        # Make sure each custom hook is associated with an original git hook
        if ! HOOK=$(git-hooks._git-hook-prefix $name); then
            echo "    Could not determine which git-hook \"$name\" is intended for. Prefix your hook with a proper git-hook name" >&2
            continue
        fi

        # Make sure we're not trying to add one that's already in .githooks
        if [[ -e $HOOKSDIR/$name ]] && \
           [[ "$(stat -c %d:%i $HOOKSDIR/$name)" == "$(stat -c %d:%i) $path)" ]]; then
            echo "  Cannot add a script that is already in .githooks" >&2
            continue
        fi

        if [[ '/' != ${path:0:1} ]]; then
            # It's a relative path
            pushd $(dirname $path) &>/dev/null
            if [[ "$(git rev-parse --show-toplevel)" == "$REPO" ]]; then
                # It's within the repository
                prefix=$(git rev-parse --show-prefix)
                path=$prefix$name
            else
                # It's external to the repository - use absolute path
                path=$PWD/$name
            fi
            popd &>/dev/null
        fi

        # Add a path entry to the config for this hook script and enable it
        git config --path hooks.$name.path $path
        git config --bool hooks.$name.enabled true
    done
}

function git-hooks.rm {
    local name
    for name in $*; do
        git config --remove-section hooks.$name || :
    done
}

function git-hooks.enable {
    local name
    for name in $*; do
        git config --unset hooks.$name.enabled
        if git config hooks.$name.path &>/dev/null; then
            git config --bool hooks.$name.enabled true
        fi
    done
}

function git-hooks.disable {
    local name
    for name in $*; do
        git config --bool hooks.$name.enabled false
    done
}

function git-hooks.run {
    local HOOK name path

    if git-hooks._is-git-hook $1; then
        HOOK=$1
    elif HOOK=$(git-hooks._git-hook-prefix $1); then
        name=$1
    else
        echo "Not a valid git hook or custom script name." >&2
        return 1
    fi
    shift || :

    # Verify the presence of expected arguments
    case $HOOK in
        applypatch-msg) [[ $# == 1 ]] || { echo "Missing 1 parameter" >&2; return 1; };;
        commit-msg) [[ $# == 1 ]] || { echo "Missing 1 parameter" >&2; return 1; };;
        prepare-commit-msg) [[ $# == 3 ]] || { echo "Missing 3 parameters" >&2; return 1; };;
        update) [[ $# == 3 ]] || { echo "Missing 3 parameters" >&2; return 1; };;
        pre-receive|post-receive) [[ -t 0 ]] && { echo "Expected contents on stdin" >&2; return 1; };;
    esac

    # locate the hook or script path
    if [[ -z $name ]];then
        path=$GITDIR/hooks/$HOOK
    elif path=$(git config hooks.$name.path); then
        :
    elif [[ -e $HOOKSDIR/$name ]]; then
        path=$HOOKSDIR/$name
    else
        echo "Could not find hook or custom script" >&2
        return 1
    fi

    pushd $TOPDIR >/dev/null
    $path $*
    popd >/dev/null
}

function git-hooks.parallel {
    local HOOK=$1
    shift || { echo "Missing git hook name" >&2; return 1; }

    if ! git-hooks._is-git-hook $HOOK; then
        echo "Hook must be a valid git hook name" >&2
        return 1
    fi

    case $1 in
        -) git config --unset hooks.$HOOK.parallel;;
        *) git config --int hooks.$HOOK.parallel $1;;
    esac
}

function git-hooks.show-input {
    local HOOK=$1 SHOW=$2
    if [[ -z $HOOK ]]; then
        echo "Missing git hook name" >&2
        return 1
    elif ! git-hooks._is-git-hook $HOOK; then
        echo "    First argument must be a valid git hook name" >&2
        return 1
    fi

    case $SHOW in
        true|false|"") ;;
        *) echo "Second argument must be true, false or omitted" >&2; return 1;;
    esac

    if [[ -n $SHOW ]] && ! $SHOW; then
        git config --unset hooks.$HOOK.showinput
    else
        git config --bool hooks.$HOOK.showinput $SHOW
    fi
}

# Determine the correct command to run and pass it the rest of the un-parsed options
case $COMMAND in
    # Require a git repository and a .githooks directory for these commands
    list|add|rm|disable|enable|run|parallel|show-input)
        if ! git-hooks._require_git_dir; then
            exit 1
        elif ! git-hooks._require_hook_dir; then
            exit 1
        elif [[ ! -e $HOOKSDIR ]]; then
            echo "No hooks installed for this repository. Use './git-hooks setup' to get started." >&2
            exit 1
        fi
        ;;

    # These do not require a .githooks directory
    setup)
        if ! git-hooks._require_git_dir; then
            exit 1
        fi
        ;;

    install|uninstall|help)
        ;;

    *)  echo "git: '$COMMAND' is not a git-hooks command. See 'git hooks help'." >&2
        exit 1
        ;;
esac

git-hooks.$COMMAND "$@"
