#! /bin/bash -e

HOOK=$1

# This script will run all configured hooks found in:
#     git config --get-all zynga.gittools.hooks.$HOOK
# It will fail if any of those fail on a command (see '-e') or if 
# they return non-zero exit codes.
#
# The hooks will be run sequentially by default for safety. 
# If you determine that your hooks can be run in parallel, enable it with:
#     git config zynga.gittools.hooks.$HOOK.parallel <num>
# where <num> is the number of jobs you wish to start. If 0, one job
# will be started for each CPU on the machine.
# For safety, you can check for parallel execution in your hook by
# checking the existence of the gittools_hooks_parallel variable.
#     [[ -z $gittools_hooks_parallel ]] # Will fail the hook unless they are being run sequentially.

[[ -n $gittools ]] || !  echo "You must install zynga.gittools"

if gittools_hooks_parallel=$(git config --get zynga.gittools.hooks.$HOOK.parallel); then
	if [[ "0" == "${gittools_hooks_parallel}" ]]; then
		export gittools_hooks_parallel="-P $(grep -c processor /proc/cpuinfo)"
	else
		export gittools_hooks_parallel="-P $(git config --get zynga.gittools.hooks.$HOOK.parallel)"
	fi
fi

# Finds the file path to the indicated hook
function find_hook () {
	# Check for repository-relative path first
	[[ -e $1 ]] && echo $1 && return

	# Local repository hooks
	[[ -e .git/hooks/$1 ]] && echo .git/hooks/$1 && return

	# Check gittools last
	[[ -e $gittools/hooks/$1 ]] && echo $gittools/hooks/$1 && return

	# Could not find hook
	return 1
}

# Make sure that each hook can be found, otherwise fail after running the ones we found
gittools_hooks=( )
gittools_fail=0
for hook in $(git config --get-all zynga.gittools.hooks.$HOOK); do
	if ! found=$(find_hook $hook); then
		echo "Could not find hook: $hook"
		gittools_fail=1
	else
		gittools_hooks[${#gittools_hooks[@]}]="$found ${*:2},"
	fi
done

# Run the hooks through xargs. If any of them fail, xargs will fail and the script
# will exit with an error code due to the -e at the top of this script.
echo -e ${gittools_hooks[*]} | xargs -d, -L1 $gittools_hooks_parallel bash -e $gittools/capture

# Fail the hook if we couldn't find one of the hook scripts (even though we ran
# the ones we found and encountered no errors)
exit $gittools_fail
